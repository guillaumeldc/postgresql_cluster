# Please specify the ip addresses and connection settings for your environment
# The specified ip addresses will be used to listen by the cluster components.
# Attention! Specify private IP addresses so that the cluster does not listen a public IP addresses.
# For deploying via public IPs, add 'ansible_host=public_ip_address' variable for each node.

# "postgresql_exists='true'" if PostgreSQL is already exists and running
# "hostname=" variable is optional (used to change the server name)
# "new_node=true" to add a new server to an existing cluster using the add_pgnode.yml playbook

# In this example, all components will be installed on PostgreSQL nodes.
# You can deploy the haproxy balancers and the etcd or consul cluster on other dedicated servers (recomended).

# if dcs_exists: false and dcs_type: "etcd"
[etcd_cluster]  # recommendation: 3, or 5-7 nodes
; 10.64.48.95
; 10.64.48.96
; 10.64.48.97
; 10.64.48.98
; 10.8.162.100
; 10.8.162.101
; 10.8.162.102

# if dcs_exists: false and dcs_type: "consul"
[consul_instances]  # recommendation: 3 or 5-7 nodes
# Datacenter: ddtc
10.64.48.95 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=ddtc
10.64.48.96 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=ddtc
10.64.48.97 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=ddtc
10.64.48.98 consul_node_role=client consul_datacenter=ddtc

# Datacenter: dvtc
10.8.162.100 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dvtc
10.8.162.101 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dvtc
10.8.162.102 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dvtc
10.8.162.77 consul_node_role=client consul_datacenter=dvtc

# if with_haproxy_load_balancing: true
[balancers]
10.64.48.95 balancer_tags="datacenter=ddtc"
10.64.48.96 balancer_tags="datacenter=ddtc"
10.64.48.97 balancer_tags="datacenter=ddtc"
10.64.48.98 balancer_tags="datacenter=ddtc"
10.8.162.77 balancer_tags="datacenter=dvtc"
10.8.162.100 balancer_tags="datacenter=dvtc"
10.8.162.101 balancer_tags="datacenter=dvtc"
10.8.162.102 balancer_tags="datacenter=dvtc"

# PostgreSQL nodes
[master]
10.64.48.95 hostname=DUKEPDPS41 postgresql_exists=false patroni_tags="datacenter=ddtc"

[replica]
10.64.48.96 hostname=DUKEPDPS42 postgresql_exists=false patroni_tags="datacenter=ddtc"
10.64.48.97 hostname=DUKEPDPS43 postgresql_exists=false patroni_tags="datacenter=ddtc"
10.64.48.98 hostname=DUKEPDPS44 postgresql_exists=false patroni_tags="datacenter=ddtc"
10.8.162.100 hostname=DVTCPDPS28 postgresql_exists=false patroni_tags="datacenter=dvtc"
10.8.162.101 hostname=DVTCPDPS29 postgresql_exists=false patroni_tags="datacenter=dvtc"
10.8.162.102 hostname=DVTCPDPS30 postgresql_exists=false patroni_tags="datacenter=dvtc"
#10.128.64.144 hostname=pgnode04 postgresql_exists=false new_node=true

[postgres_cluster:children]
master
replica

# if pgbackrest_install: true and "repo_host" is set
[pgbackrest]
; ansible_user='elduco'
; ansible_ssh_pass='!Digital2024'

# Connection settings
[all:vars]
ansible_connection='ssh'
ansible_ssh_port='22'
ansible_user='elduco'
ansible_ssh_pass='!Digital2024'  # "sshpass" package is required for use "ansible_ssh_pass"
#ansible_ssh_private_key_file=
ansible_python_interpreter='/usr/bin/python3'  # is required for use python3

[pgbackrest:vars]
; ansible_user='elduco'
; ansible_ssh_pass='!Digital2024'

